buildscript {
	ext {
		springBootVersion = '2.3.9.RELEASE'
    }
	repositories {
		mavenCentral()
    	maven { url 'https://repo.spring.io/libs-milestone'}
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
	}
}

group 'com.cyworld'
version '1.0-SNAPSHOT'

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

targetCompatibility = '11'
sourceCompatibility = '11'
compileJava.options.encoding = 'UTF-8'

repositories {
    mavenCentral()
}

apply plugin: 'war'

jar.enabled = false
bootWar.enabled = true

bootWar {
	baseName = 'front'
	mainClassName = 'com.cyworld.front.WebApplication'
	version = ''
	exclude("**/static/*")
	exclude("**/static")
	exclude("**/resources/static/*")
	exclude("**/resources/static")
	exclude("**/resources/bootstrap/*.html") //제외
	exclude("**/resources/bootstrap/*.html") //제외
}

ext.profile = (!project.hasProperty('profile') || !profile) ? 'local' : profile

dependencies {
    if ( "${profile}".indexOf('local')  > -1 ) {
       	implementation project(path: ':common', configuration: 'default')
	} else {
		implementation fileTree(dir: 'src/comlib', include: ['*.jar'])
	}
	implementation fileTree(dir: 'src/lib', include: ['*.jar'])
    implementation 'org.springframework.boot:spring-boot-starter'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-validation' //validation
    implementation 'org.springframework.mobile:spring-mobile-device:1.1.5.RELEASE' //device info
    implementation 'org.springframework.boot:spring-boot-starter-data-redis' //redis cache/session
    implementation 'org.springframework.boot:spring-boot-starter-cache'
    implementation 'org.springframework.session:spring-session-data-redis'//redis session
    implementation 'it.ozimov:embedded-redis:0.7.2' //embedded-redis - profile=local

    // for QueryDSL
    implementation "com.querydsl:querydsl-jpa"
    implementation "com.querydsl:querydsl-core"
    annotationProcessor "com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jpa" // querydsl JPAAnnotationProcessor 사용 지정
    annotationProcessor "jakarta.persistence:jakarta.persistence-api:2.2.3"
    annotationProcessor "jakarta.annotation:jakarta.annotation-api:1.3.5"

    implementation "org.springdoc:springdoc-openapi-ui:1.5.2" //swagger

    compileOnly 'org.projectlombok:lombok:1.18.18'
	annotationProcessor 'org.projectlombok:lombok:1.18.18'

	implementation 'org.apache.commons:commons-configuration2:2.6'

	implementation 'javax.servlet:jstl'
    implementation 'org.apache.tomcat.embed:tomcat-embed-jasper'

    implementation 'org.apache.commons:commons-configuration2:2.6'

    implementation group: 'commons-codec', name: 'commons-codec', version: '1.14'

}

// querydsl 적용
def generated='src/main/generated'
sourceSets {
    main.java.srcDirs += [ generated ]
}

tasks.withType(JavaCompile) {
    options.annotationProcessorGeneratedSourcesDirectory = file(generated)
}

clean.doLast {
    file(generated).deleteDir()
}

task frontJarToCodeDeploy(type: Copy, dependsOn: build, group: 'build') {
	println file("====== frontJarToCodeDeploy profile : ${profile} =======")
	from "${buildDir}/libs"
	include "**/*.war"
	into "${rootDir}/deploy/front"
}